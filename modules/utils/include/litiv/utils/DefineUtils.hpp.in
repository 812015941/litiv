
// This file is part of the LITIV framework; visit the original repository at
// https://github.com/plstcharles/litiv for more information.
//
// Copyright 2015 Pierre-Luc St-Charles; pierre-luc.st-charles<at>polymtl.ca
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: no includes in this file!

#pragma once

#ifndef __CMAKE_VAR_DEF_DROP_IN__
#define __CMAKE_VAR_DEF_DROP_IN__
// required for cmake cached variable drop-in
#define ON        1
#define TRUE      1
#define OFF       0
#define FALSE     0
#endif //__CMAKE_VAR_DEF_DROP_IN__

#define XSTR_CONCAT(s1,s2) XSTR_CONCAT_BASE(s1,s2)
#define XSTR_CONCAT_BASE(s1,s2) s1##s2
#define XSTR(s) XSTR_BASE(s)
#define XSTR_BASE(s) #s

#define TIMER_TIC(x) int64 XSTR_CONCAT(__nCPUTimerTick_,x) = cv::getTickCount()
#define TIMER_TOC(x) int64 XSTR_CONCAT(__nCPUTimerVal_,x) = cv::getTickCount()-XSTR_CONCAT(__nCPUTimerTick_,x)
#define TIMER_ELAPSED_MS(x) (double(XSTR_CONCAT(__nCPUTimerVal_,x))/(cv::getTickFrequency()/1000))

// @@@@ replace lvAssert/lvDbgAssert with version with obligatory msg param? (also replace all cv asserts by those)

#define lvError(msg) throw CxxUtils::Exception(msg,__PRETTY_FUNCTION__,__FILE__,__LINE__)
#define lvErrorExt(msg,...) throw CxxUtils::Exception(msg,__PRETTY_FUNCTION__,__FILE__,__LINE__,__VA_ARGS__)
#define lvAssert(expr) {if(!!(expr)); else lvError("assertion failed ("#expr")");}
#ifdef _DEBUG
#define lvDbgAssert(expr) lvAssert(expr)
#define lvDbgExceptionWatch CxxUtils::UncaughtExceptionLogger __logger(__PRETTY_FUNCTION__,__FILE__,__LINE__)
#else //ndefined(_DEBUG)
#define lvDbgAssert(expr)
#define lvDbgExceptionWatch
#endif //ndefined(_DEBUG)
#define lvIgnore(x) (void)(x)
#define UNUSED(x) lvIgnore(x)

#ifndef D2R
#define D2R(d) ((d)*(M_PI/180.0))
#endif //ndefined(D2R)
#ifndef R2D
#define R2D(r) ((r)*(180.0/M_PI))
#endif //ndefined(R2D)
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif //ndefined(__STDC_FORMAT_MACROS)

#if defined(_MSC_VER)
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCSIG__
#endif //ndefined(__PRETTY_FUNCTION__)
#ifndef NOMINMAX
#define NOMINMAX // go ahead, try using std::numeric_limits<...>::max() with the 'max' macro enabled
#endif //ndefined(NOMINMAX)
#ifndef __func__
#define __func__ __FUNCTION__
#endif //ndefined(__func__)
#if _MSC_VER<1900 // need >= MSVC 2015 (v140) toolchain
#error "This project requires full C++11 support (including constexpr and SFINAE)."
#endif //_MSC_VER<1900
#else //ndefined(_MSC_VER)
#if __cplusplus<201103L
#error "This project requires full C++11 support (including constexpr and SFINAE)."
#endif //__cplusplus<201103L
#endif //ndefined(_MSC_VER)

#define LITIV_VERSION       @LITIV_VERSION@
#define LITIV_VERSION_STR   XSTR(LITIV_VERSION)
#define LITIV_VERSION_MAJOR @LITIV_VERSION_MAJOR@
#define LITIV_VERSION_MINOR @LITIV_VERSION_MINOR@
#define LITIV_VERSION_PATCH @LITIV_VERSION_PATCH@
#define LITIV_VERSION_SHA1  "@GIT_SHA1@"

#define DATASET_ROOT XSTR(@DATASET_ROOT@)

// compile-time master switches for GPU/SIMD/threads usage
#define HAVE_GPU_SUPPORT    1
#define HAVE_SIMD_SUPPORT   1
#define DEFAULT_NB_THREADS  1

#if HAVE_GPU_SUPPORT
#define HAVE_GLSL           @USE_GLSL@
#define HAVE_CUDA           @USE_CUDA@
#define HAVE_OPENCL         @USE_OPENCL@
#endif //HAVE_GPU_SUPPORT

#if HAVE_GLSL
#define TARGET_GL_VER_MAJOR @TARGET_GL_VER_MAJOR@
#define TARGET_GL_VER_MINOR @TARGET_GL_VER_MINOR@
#define GLEW_EXPERIMENTAL   @GLEW_EXPERIMENTAL@
#define HAVE_GLFW           @USE_GLFW@
#define HAVE_FREEGLUT       @USE_FREEGLUT@
#endif //HAVE_GLSL

#if HAVE_SIMD_SUPPORT
#define HAVE_MMX            @USE_MMX@
#define HAVE_SSE            @USE_SSE@
#define HAVE_SSE2           @USE_SSE2@
#define HAVE_SSE3           @USE_SSE3@
#define HAVE_SSSE3          @USE_SSSE3@
#define HAVE_SSE4_1         @USE_SSE4_1@
#define HAVE_SSE4_2         @USE_SSE4_2@
#define HAVE_POPCNT         @USE_POPCNT@
#define HAVE_AVX            @USE_AVX@
#define HAVE_AVX2           @USE_AVX2@
#endif //HAVE_SIMD_SUPPORT

#ifndef USE_VPTZ_STANDALONE
#define USE_VPTZ_STANDALONE       @USE_VPTZ_STANDALONE@
#endif //USE_VPTZ_STANDALONE
#ifndef USE_BSDS500_BENCHMARK
#define USE_BSDS500_BENCHMARK     @USE_BSDS500_BENCHMARK@
#endif //USE_BSDS500_BENCHMARK
