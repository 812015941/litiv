
// This file is part of the LITIV framework; visit the original repository at
// https://github.com/plstcharles/litiv for more information.
//
// Copyright 2015 Pierre-Luc St-Charles; pierre-luc.st-charles<at>polymtl.ca
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include "litiv/vptz/defines.hpp"

//
//       -- Below are code snippets taken from the LITIV framework --
//

#if USE_VPTZ_STANDALONE

#define VPTZ_VERSION        @LITIV_VERSION@
#define VPTZ_VERSION_STR    XSTR(LITIV_VERSION)
#define VPTZ_VERSION_MAJOR  @LITIV_VERSION_MAJOR@
#define VPTZ_VERSION_MINOR  @LITIV_VERSION_MINOR@
#define VPTZ_VERSION_PATCH  @LITIV_VERSION_PATCH@
#define VPTZ_VERSION_SHA1   "@GIT_SHA1@"

#if defined(_MSC_VER)
#include <windows.h>
#endif //ndef(_MSC_VER)
#include <cmath>
#include <mutex>
#include <vector>
#include <thread>
#include <chrono>
#include <atomic>
#include <future>
#include <iostream>
#include <functional>
#include <type_traits>
#include <condition_variable>
#include <opencv2/core.hpp>

#include <GL/glew.h>
#if HAVE_GLFW
#include <GLFW/glfw3.h>
struct glfwWindowDeleter {
    void operator()(GLFWwindow* pWindow) {
        glfwDestroyWindow(pWindow);
    }
};
#endif //HAVE_GLFW
#if HAVE_FREEGLUT
#include <GL/freeglut.h>
struct glutHandle {
    glutHandle() : m_nHandle(0) {}
    glutHandle(std::nullptr_t) : m_nHandle(0) {}
    explicit glutHandle(int v) : m_nHandle(v) {}
    glutHandle& operator=(std::nullptr_t) {m_nHandle = 0; return *this;}
    explicit operator bool() const {return m_nHandle!=0;}
    int m_nHandle;
};
inline bool operator==(const glutHandle& lhs, const glutHandle& rhs) {return lhs.m_nHandle==rhs.m_nHandle;}
inline bool operator!=(const glutHandle& lhs, const glutHandle& rhs) {return lhs.m_nHandle!=rhs.m_nHandle;}
struct glutWindowDeleter {
    void operator()(const glutHandle& oWindowHandle) {
        glutDestroyWindow(oWindowHandle.m_nHandle);
    }
    typedef glutHandle pointer;
};
#endif //HAVE_FREEGLUT

namespace lv {

    struct UncaughtExceptionLogger {
        UncaughtExceptionLogger(const char* sFunc, const char* sFile, int nLine) :
                m_sFunc(sFunc),m_sFile(sFile),m_nLine(nLine) {}
        const char* const m_sFunc;
        const char* const m_sFile;
        const int m_nLine;
        ~UncaughtExceptionLogger() {
            if(std::uncaught_exception())
                std::cerr << cv::format("Unwinding at function '%s' from %s(%d) due to uncaught exception\n",m_sFunc,m_sFile,m_nLine);
        }
    };

    struct Exception : public std::runtime_error {
        template<typename... Targs>
        Exception(const std::string& sErrMsg, const char* sFunc, const char* sFile, int nLine, Targs&&... args) :
                std::runtime_error(cv::format((std::string("Exception in function '%s' from %s(%d) : \n")+sErrMsg).c_str(),sFunc,sFile,nLine,std::forward<Targs>(args)...)),
                m_acFuncName(sFunc),
                m_acFileName(sFile),
                m_nLineNumber(nLine) {
            std::cerr << this->what() << std::endl;
        }
        const char* const m_acFuncName;
        const char* const m_acFileName;
        const int m_nLineNumber;
    };

    template<typename T>
    inline bool isnan(T dVal) {
#ifdef _MSC_VER // needed for portability...
        return _isnan((double)dVal)!=0;
#else //(!def(_MSC_VER))
        return std::isnan(dVal);
#endif //(!def(_MSC_VER))
    }

    namespace gl {

        class Context {
        public:
            Context(const cv::Size& oWinSize, const std::string& sWinName, bool bHide=true, size_t nGLVerMajor=3, size_t nGLVerMinor=0) {
#if HAVE_GLFW
                std::call_once(getInitFlag(),[](){
                    if(glfwInit()==GL_FALSE)
                        lvError("Failed to init GLFW");
                    std::atexit(glfwTerminate);
                });
                if(nGLVerMajor>3 || (nGLVerMajor==3 && nGLVerMinor>=2))
                    glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
                glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,int(nGLVerMajor));
                glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,int(nGLVerMinor));
                glfwWindowHint(GLFW_RESIZABLE,GL_FALSE);
                if(bHide)
                    glfwWindowHint(GLFW_VISIBLE,GL_FALSE);
                m_pWindowHandle = std::unique_ptr<GLFWwindow,glfwWindowDeleter>(glfwCreateWindow(oWinSize.width,oWinSize.height,sWinName.c_str(),nullptr,nullptr),glfwWindowDeleter());
                if(!m_pWindowHandle.get())
                    lvError_("Failed to create [%d,%d] window via GLFW for core GL profile v%d.%d",oWinSize.width,oWinSize.height,nGLVerMajor,nGLVerMinor);
                glfwMakeContextCurrent(m_pWindowHandle.get());
#elif HAVE_FREEGLUT
                std::call_once(getInitFlag(),[](){
                    int argc = 0;
                    glutInit(&argc,NULL);
                });
                glutInitDisplayMode(GLUT_SINGLE);
                glutInitWindowSize(oWinSize.width,oWinSize.height);
                glutInitWindowPosition(0,0);
                m_oWindowHandle = std::unique_ptr<glutHandle,glutWindowDeleter>(glutHandle(glutCreateWindow(sWinName.c_str())),glutWindowDeleter());
                if(!(m_oWindowHandle.get().m_nHandle))
                    lvError("Failed to create window via glut");
                glutSetWindow(m_oWindowHandle.get().m_nHandle);
                if(bHide)
                    glutHideWindow();
#endif //HAVE_FREEGLUT
                initGLEW(nGLVerMajor,nGLVerMinor);
            }

            void setAsActive() {
#if HAVE_GLFW
                glfwMakeContextCurrent(m_pWindowHandle.get());
#elif HAVE_FREEGLUT
             glutSetWindow(m_oWindowHandle.get().m_nHandle);
#endif //HAVE_FREEGLUT
            }
        private:
            static void initGLEW(size_t nGLVerMajor, size_t nGLVerMinor) {
                glErrorCheck;
                glewExperimental = GL_TRUE;
                const GLenum glewerrn = glewInit();
                if(glewerrn!=GLEW_OK)
                    lvError_("Failed to init GLEW [code=%d, msg=%s]",glewerrn,glewGetErrorString(glewerrn));
                const GLenum errn = glGetError();
                // see glew init GL_INVALID_ENUM bug discussion at https://www.opengl.org/wiki/OpenGL_Loading_Library
                if(errn!=GL_NO_ERROR && errn!=GL_INVALID_ENUM)
                    lvError_("Unexpected GLEW init error [code=%d, msg=%s]",errn,gluErrorString(errn));
                const std::string sGLEWVersionString = std::string("GL_VERSION_")+std::to_string(nGLVerMajor)+"_"+std::to_string(nGLVerMinor);
                if(!glewIsSupported(sGLEWVersionString.c_str()))
                    lvError_("Bad GL core/ext version detected (target is %s)",sGLEWVersionString.c_str());
            }
#if HAVE_GLFW
            std::unique_ptr<GLFWwindow,glfwWindowDeleter> m_pWindowHandle;
#elif HAVE_FREEGLUT
            std::unique_ptr<glutHandle,glutWindowDeleter> m_oWindowHandle;
#endif //HAVE_FREEGLUT
            Context& operator=(const Context&) = delete;
            Context(const Context&) = delete;
            static std::once_flag& getInitFlag() {static std::once_flag oInitFlag; return oInitFlag;}
        };

    } // namespace gl

} // namespace lv

#endif //USE_VPTZ_STANDALONE