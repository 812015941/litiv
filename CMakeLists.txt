cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/bin)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
include(FrameworkUtils)
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
#set(CMAKE_VERBOSE_MAKEFILE ON)

project(litiv_framework)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(LITIV_FRAMEWORK_VERSION_MAJOR 1)
set(LITIV_FRAMEWORK_VERSION_MINOR 0)
set(LITIV_FRAMEWORK_VERSION_PATCH 0)
set(LITIV_FRAMEWORK_VERSION ${LITIV_FRAMEWORK_VERSION_MAJOR}.${LITIV_FRAMEWORK_VERSION_MINOR}.${LITIV_FRAMEWORK_VERSION_PATCH})
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG>)
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:_DEBUG>)

option(USE_FAST_MATH "Enable fast math optimizations" OFF)

### OPENCV CHECK
find_package(OpenCV 3.0 REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
add_definitions(${OpenCV_DEFINITIONS})

### GLSL CHECK
find_package(GLFW REQUIRED) ## @@@@ switch to 'not required' later?
find_package(GLUT REQUIRED) ## @@@@ switch to 'not required' later?
find_package(OpenGL REQUIRED) ## @@@@ switch to 'not required' later?
find_package(GLEW REQUIRED) ## @@@@ switch to 'not required' later?
find_package(GLM REQUIRED) ## @@@@ switch to 'not required' later?
set_eval(USE_GLSL ((${GLFW_FOUND} OR ${GLUT_FOUND}) AND ${OPENGL_FOUND} AND ${GLEW_FOUND} AND ${GLM_FOUND}))
if(USE_GLSL)
    if(${GLFW_FOUND})
        set(USE_GLFW 1 CACHE BOOL "Use GLFW as the OpenGL window manager")
        set(USE_GLUT 0 CACHE BOOL "Use GLUT as the OpenGL window manager")
    elseif(${GLUT_FOUND})
        set(USE_GLFW 0 CACHE BOOL "Use GLFW as the OpenGL window manager")
        set(USE_GLUT 1 CACHE BOOL "Use GLUT as the OpenGL window manager")
    endif(${GLFW_FOUND})
    if(${USE_GLFW} EQUAL ${USE_GLUT})
        message(FATAL_ERROR "Need to select one window manager.")
    endif(${USE_GLFW} EQUAL ${USE_GLUT})
    if(USE_GLFW)
        include_directories(${GLFW_INCLUDE_DIRS})
    elseif(USE_GLUT)
        include_directories(${GLUT_INCLUDE_DIRS})
    endif(USE_GLFW)
    include_directories(${OpenGL_INCLUDE_DIRS})
    include_directories(${GLEW_INCLUDE_DIRS})
    include_directories(${GLM_INCLUDE_DIRS})
    set(TARGET_GL_VER_MAJOR 4 CACHE STRING "Target OpenGL profile major version")
    set(TARGET_GL_VER_MINOR 4 CACHE STRING "Target OpenGL profile minor version")
    option(GLEW_EXPERIMENTAL "Use experimental GLEW features" ON)
endif(USE_GLSL)
message(STATUS USE_GLSL=${USE_GLSL})

### CUDA CHECK @@@@ add later for parallel utils & impls
set_eval(USE_CUDA 0)

### OPENCL CHECK @@@@ add later for parallel utils & impls
set_eval(USE_OPENCL 0)

### HARDWARE SIMD CHECK
if(CMAKE_CROSSCOMPILING)
    option(USE_MMX "Use MMX instructions support" OFF)
    option(USE_SSE "Use SSE instructions support" OFF)
    option(USE_SSE2 "Use SSE2 instructions support" OFF)
    option(USE_SSE3 "Use SSE3 instructions support" OFF)
    option(USE_SSSE3 "Use SSSE3 instructions support" OFF)
    option(USE_SSE4_1 "Use SSE4_1 instructions support" OFF)
    option(USE_SSE4_2 "Use SSE4_2 instructions support" OFF)
    option(USE_POPCNT "Use POPCNT instructions support" OFF)
    option(USE_AVX "Use AVX instructions support" OFF)
    option(USE_AVX2 "Use AVX2 instructions support" OFF)
else(CMAKE_CROSSCOMPILING)
    ## @@@@ these might not work on msvc toolchain (to be tested)
    try_cvhardwaresupport_runcheck_and_set_success(MMX)
    try_cvhardwaresupport_runcheck_and_set_success(SSE)
    try_cvhardwaresupport_runcheck_and_set_success(SSE2)
    try_cvhardwaresupport_runcheck_and_set_success(SSE3)
    try_cvhardwaresupport_runcheck_and_set_success(SSSE3)
    try_cvhardwaresupport_runcheck_and_set_success(SSE4_1)
    try_cvhardwaresupport_runcheck_and_set_success(SSE4_2)
    try_cvhardwaresupport_runcheck_and_set_success(POPCNT)
    try_cvhardwaresupport_runcheck_and_set_success(AVX)
    try_cvhardwaresupport_runcheck_and_set_success(AVX2)
endif(CMAKE_CROSSCOMPILING)
if(CMAKE_COMPILER_IS_GNUCXX)
    if(NOT CMAKE_CROSSCOMPILING)
        add_definitions(-march=native)
    endif(NOT CMAKE_CROSSCOMPILING)
    if(USE_FAST_MATH)
        add_definitions(-ffast-math)
    endif(USE_FAST_MATH)
    add_definitions(-Wall)
    add_definitions(-Wextra)
    add_definitions(-Wshadow)
    add_definitions(-Wfatal-errors)
elseif(MSVC AND WIN32)
    if(USE_FAST_MATH)
        add_definitions(/fp:fast)
    else(NOT USE_FAST_MATH)
        add_definitions(/fp:precise)
    endif(NOT USE_FAST_MATH)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(/openmp)
    add_definitions(/arch:AVX) # check performance difference? vs 387? @@@
    add_definitions(/Wall)
else()
    message(SEND_ERROR "Unsupported compiler/platform")
endif()

add_subdirectory(3rdparty)

initialize_internal_list(litiv_modules)
initialize_internal_list(litiv_projects)
if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Werror)
    add_definitions(-pedantic-errors)
elseif(MSVC AND WIN32)
    add_definitions(/WX)
else()
    message(SEND_ERROR "Unsupported compiler/platform")
endif()

add_subdirectory(modules)
add_subdirectory(execs)
